/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package io.github.beohoang98.chat_ui.components;

import com.google.common.eventbus.Subscribe;
import io.github.beohoang98.chat_ui.App;
import io.github.beohoang98.chat_ui.events.ChatChooseUserEvent;
import io.github.beohoang98.chat_ui.events.MessageEvent;
import io.github.beohoang98.chat_ui.events.MessageListLoadedEvent;
import io.github.beohoang98.chat_ui.models.MessageModel;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author noobcoder
 */
public class ChatContainer extends javax.swing.JPanel {
    Logger logger = LogManager.getRootLogger();
    List<String> tabIndex = new ArrayList<>();
    Map<String, ChatContent> mapComponent = new HashMap<>();

    /**
     * Creates new form ChatContainer
     */
    public ChatContainer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();

        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                formAncestorRemoved(evt);
            }
        });
        setLayout(new java.awt.BorderLayout());

        tabs.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabsStateChanged(evt);
            }
        });
        add(tabs, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        App.eventBus.register(this);
    }//GEN-LAST:event_formAncestorAdded

    private void formAncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorRemoved
        App.eventBus.unregister(this);
    }//GEN-LAST:event_formAncestorRemoved

    private void tabsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabsStateChanged
        int index = tabs.getSelectedIndex();
        if (index < 0) return;
        try {
            ClosableTab tab = (ClosableTab) tabs.getTabComponentAt(index);
            tab.setHighlight(false);   
        } catch (ClassCastException | NullPointerException ex) {
            // this is normal behavior, skip
        }
    }//GEN-LAST:event_tabsStateChanged

    @Subscribe
    void onMessage(MessageEvent event) {
        MessageModel msg = event.getMessage();
        String other = msg.getOwnerUsername().equals(App.getUser().getUsername())
            ? msg.getToUsername()
            : msg.getOwnerUsername();

        if (mapComponent.containsKey(other)) {
            mapComponent.get(other).addMessage(msg);
        }
        int index = tabIndex.indexOf(other);
        if (index >= 0) {
            ((ClosableTab) tabs.getTabComponentAt(index)).setHighlight(true);
        } else {
            addTabChat(other);
        }
    }

    @Subscribe
    void onMessageListLoaded(MessageListLoadedEvent event) {
        if (mapComponent.containsKey(event.getUsername())) {
            mapComponent.get(event.getUsername())
                .reload();
        }
    }

    @Subscribe
    void onChooseUserChat(ChatChooseUserEvent event) {
        String username = event.getUsername();
        if (username == null) {
            return;
        }
        int existIndex = tabIndex.indexOf(username);

        if (existIndex >= 0) {
            tabs.setSelectedIndex(existIndex);
        } else {
            addTabChat(username);
        }
    }

    void addTabChat(final String username) {
        logger.info("Open tab: " + username);
        ChatContent chatContent = new ChatContent(username);
        mapComponent.put(username, chatContent);
        tabs.addTab(username, chatContent);
        tabIndex.add(username);

        final int newIndex = tabIndex.size() - 1;
        ClosableTab tab = new ClosableTab(username);
        
        tabs.setTabComponentAt(newIndex, tab);
        
        tab.setOnCloseHandler(() -> {
            int currentIndex = tabIndex.indexOf(username);
            tabIndex.remove(currentIndex);
            tabs.removeTabAt(currentIndex);
            mapComponent.remove(username);
            return null;
        });
        tabs.setSelectedIndex(newIndex);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane tabs;
    // End of variables declaration//GEN-END:variables
}
